name: Release Debug

on:
  pull_request:

jobs:
  build:
    name: Release Debug
    strategy:
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: ['8']
    runs-on: ${{ matrix.operating-system }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}

      - name: Download dependencies
        uses: php-actions/composer@v6
        with:
          args: --ignore-platform-reqs --quiet
          working_dir: app

      - name: Set snapshot name
        id: snapshot_name
        env:
          EVENT_NAME: ${{ github.event_name }}
          PR_NUMBER: ${{ github.event.number }}
          RELEASE_VERSION: ${{ steps.version.outputs.value }}
        run: |
          cd app
          SNAPSHOT_NAME=$(
            php bin/console app:snapshot:create-name \
            --event-name $EVENT_NAME \
            --pull-request-number $PR_NUMBER \
            --release-version $RELEASE_VERSION
          )
          echo "::set-output name=value::$SNAPSHOT_NAME"


      - name: Verify snapshot name
        run: echo ${{ steps.snapshot_name.outputs.value }}

#      - name: Set version
#        id: version
#        env:
#          RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
#        run: |
#          [[ ! -z "$RELEASE_TAG_NAME" ]] && echo "::set-output name=value::$RELEASE_TAG_NAME" || echo "::set-output name=value::master"
#
#      - name: Read build config
#        id: build-config
#        env:
#          ENV_FILE_PATH: ./build.env
#        run: ./ci/read-env-file.sh
#
#      - name: Output build config
#        env:
#          WORKER_MANAGER_VERSION: ${{ steps.build-config.outputs.WORKER_MANAGER_VERSION }}
#        run: |
#          echo WORKER_MANAGER_VERSION $WORKER_MANAGER_VERSION
#
#      - name: Set snapshot name
#        id: snapshot_name
#        env:
#          EVENT_NAME: ${{ github.event_name }}
#          PR_NUMBER: ${{ github.event.number }}
#          RELEASE_TAG_NAME: ${{ steps.version.outputs.value }}
#        run: |
#          SNAPSHOT_NAME=$(./ci/create-snapshot-name.sh)
#          echo "::set-output name=value::$SNAPSHOT_NAME"

#      - name: Verify snapshot name
#        run: echo ${{ steps.snapshot_name.outputs.value }}
#
#      - name: Install packer
#        run: |
#          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
#          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
#          sudo apt-get update && sudo apt-get install packer
#
#      - name: Verify packer installation
#        run: |
#          packer --version
#          if [ $? -ne 0 ]; then exit 1; fi; exit 0;
#
#      - name: Verify image configuration
#        env:
#          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
#          SNAPSHOT_NAME: ${{ steps.snapshot_name.outputs.value }}
#          WORKER_MANAGER_VERSION: ${{ steps.build-config.outputs.WORKER_MANAGER_VERSION }}
#        run: packer validate image.pkr.hcl
#
#      - name: Create image and snapshot
#        id: snapshot
#        env:
#          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
#          SNAPSHOT_NAME: ${{ steps.snapshot_name.outputs.value }}
#          WORKER_MANAGER_VERSION: ${{ steps.build-config.outputs.WORKER_MANAGER_VERSION }}
#        run: |
#          packer build image.pkr.hcl | tee packer.log
#          ID=$(cat packer.log | tail -1 | grep -P -o 'ID: \d+' | tr -d 'ID: ')
#
#          echo "::set-output name=id::$ID"
#
#      - name: Verify snapshot exists
#        env:
#          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
#          ID: ${{ steps.snapshot.outputs.id }}
#        run: |
#          ID=$ID \
#          DIGITALOCEAN_API_TOKEN=$DIGITALOCEAN_API_TOKEN \
#          ./ci/verify-snapshot-exists.sh
#
#          if [ $? -ne 0 ]; then exit 1; fi; exit 0;
#
#      - name: Remove created image if not a release
#        if: ${{ github.event_name != 'release' }}
#        env:
#          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
#          ID: ${{ steps.snapshot.outputs.id }}
#        run: |
#          ID=$ID \
#          DIGITALOCEAN_API_TOKEN=$DIGITALOCEAN_API_TOKEN \
#          ./ci/delete-snapshot.sh
#
#          ID=$ID \
#          DIGITALOCEAN_API_TOKEN=$DIGITALOCEAN_API_TOKEN \
#          ./ci/verify-snapshot-not-exists.sh
#
#          if [ $? -ne 0 ]; then exit 1; fi; exit 0;
