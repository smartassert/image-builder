name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      snapshot-name: ${{ steps.snapshot-name.outputs.value }}
      should-deploy: ${{ steps.should-deploy.outputs.value }}
      version: ${{ steps.version.outputs.value }}
      worker-manager-version: ${{ steps.build-config.outputs.WORKER_MANAGER_VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout bash-ga-ci-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-ci-tools
          path: ./vendor/smartassert/bash-ga-ci-tools
          ref: main

      - name: Checkout bash-ga-deploy-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-deploy-tools
          path: ./vendor/smartassert/bash-ga-deploy-tools
          ref: main

      - name: Checkout bash-read-env-file
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-read-env-file
          path: ./vendor/smartassert/bash-read-env-file
          ref: main

      - name: Set version
        id: version
        env:
          VALUE1: ${{ github.event.release.tag_name }}
          DEFAULT: master
        run: echo "::set-output name=value::$(./vendor/smartassert/bash-ga-ci-tools/src/select-defined-variable-or-default.sh)"

      - name: Output version
        env:
          VALUE: ${{ steps.version.outputs.value }}
        run: |
          [ "" != "$VALUE" ] && echo "$VALUE"

      - name: Set snapshot name
        id: snapshot-name
        env:
          EVENT_NAME: ${{ github.event_name }}
          PR_NUMBER: ${{ github.event.number }}
          VERSION: ${{ steps.version.outputs.value }}
        run: |
          SNAPSHOT_NAME=$(./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/create-name.sh)
          echo "::set-output name=value::$SNAPSHOT_NAME"

      - name: Output snapshot name
        env:
          VALUE: ${{ steps.snapshot-name.outputs.value }}
        run: |
          [ "" != "$VALUE" ] && echo "$VALUE"

      - name: Deploy after building image?
        id: should-deploy
        env:
          EXPECTED: release
          ACTUAL: ${{ github.event_name }}
          DEFAULT: false
        run: echo "::set-output name=value::$(./vendor/smartassert/bash-ga-ci-tools/src/boolean-if-actual-is-expected-else-default.sh)"

      - name: Output should deploy
        run: echo ${{ steps.should-deploy.outputs.value }}

      - name: Read build config
        id: build-config
        env:
          ENV_FILE_PATH: ./build.env
        run: ./vendor/smartassert/bash-read-env-file/src/read-env-file-ga.sh

      - name: Output worker manager version
        env:
          VALUE: ${{ steps.build-config.outputs.WORKER_MANAGER_VERSION }}
        run: |
          [ "" != "$VALUE" ] && echo "$VALUE"

  create-image:
    needs: setup
    name: Create image
    runs-on: ubuntu-latest
    outputs:
      image-id: ${{ steps.image.outputs.id }}
    env:
      DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout bash-ga-deploy-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-deploy-tools
          path: ./vendor/smartassert/bash-ga-deploy-tools
          ref: main

      - name: Validate image configuration
        uses: hashicorp/packer-github-actions@master
        env:
          SNAPSHOT_NAME: ${{ needs.setup.outputs.snapshot-name }}
          WORKER_MANAGER_VERSION: ${{ needs.setup.outputs.worker-manager-version }}
        with:
          command: validate
          target: image.pkr.hcl

      - name: Set packer log path
        id: packer-log-path
        run: echo "::set-output name=value::./packer.log"

      - name: Create image
        uses: hashicorp/packer-github-actions@master
        env:
          SNAPSHOT_NAME: ${{ needs.setup.outputs.snapshot-name }}
          WORKER_MANAGER_VERSION: ${{ needs.setup.outputs.worker-manager-version }}
          PACKER_LOG_PATH: ${{ steps.packer-log-path.outputs.value }}
          PACKER_LOG: 1
        with:
          command: build
          arguments: "-machine-readable"
          target: image.pkr.hcl

      - name: Extract image ID from packer log
        id: image
        env:
          PACKER_LOG_PATH: ${{ steps.packer-log-path.outputs.value }}
        run: echo "::set-output name=id::$(./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/extract-id-from-packer-log.sh)"

      - name: Verify image exists
        env:
          IMAGE_ID: ${{ steps.image.outpUse actions/packer-github-actionsuts.id }}
          EXPECTED_EXISTS: "true"
        run: ./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/verify-existence.sh

  update-stored-snapshot-id:
    needs: [setup, create-image]
    name: Update stored snapshot ID
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.should-deploy == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Trigger update worker manager image workflow if a release
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Update worker manager image
          token: ${{ secrets.PAT_TOKEN_SELF }}
          inputs: |
            {
              "image": "${{ needs.create-image.outputs.image-id }}",
              "commit_message": "Automatic worker-manager-image.env for release ${{ needs.setup.outputs.version }} ${{ needs.create-image.outputs.image-id }}"
            }

  remove-snapshot:
    needs: create-image
    name: Remove snapshot if not deploying
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.should-deploy == 'false' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout bash-ga-deploy-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-deploy-tools
          path: ./vendor/smartassert/bash-ga-deploy-tools
          ref: main

      - name: Remove snapshot
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          IMAGE_ID: ${{ needs.create-image.outputs.image-id }}
          EXPECTED_EXISTS: "false"
        run: |
          ./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/delete.sh
          ./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/verify-existence.sh
