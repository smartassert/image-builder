name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      snapshot-name: ${{ steps.snapshot-name.outputs.value }}
      should-deploy: ${{ steps.should-deploy.outputs.value }}
      version: ${{ steps.version.outputs.value }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout bash-ga-ci-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-ci-tools
          path: ./vendor/smartassert/bash-ga-ci-tools
          ref: main

      - name: Checkout bash-ga-deploy-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-deploy-tools
          path: ./vendor/smartassert/bash-ga-deploy-tools
          ref: main

      - name: Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8

      - name: Download dependencies
        uses: php-actions/composer@v6
        with:
          args: --ignore-platform-reqs --quiet
          working_dir: app

      - name: Set version
        id: version
        env:
          VALUE1: ${{ github.event.release.tag_name }}
          DEFAULT: master
        run: echo "::set-output name=value::$(./vendor/smartassert/bash-ga-ci-tools/src/select-defined-variable-or-default.sh)"

      - name: Output version
        env:
          VALUE: ${{ steps.version.outputs.value }}
        run: |
          [ "" != "$VALUE" ] && echo "$VALUE"

      - name: Set snapshot name
        id: snapshot-name
        env:
          EVENT_NAME: ${{ github.event_name }}
          PR_NUMBER: ${{ github.event.number }}
          VERSION: ${{ steps.version.outputs.value }}
        run: |
          SNAPSHOT_NAME=$(./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/create-name.sh)
          echo "::set-output name=value::$SNAPSHOT_NAME"

      - name: Output snapshot name
        env:
          VALUE: ${{ steps.snapshot-name.outputs.value }}
        run: |
          [ "" != "$VALUE" ] && echo "$VALUE"

      - name: Deploy after building image?
        id: should-deploy
        env:
          EVENT_NAME: ${{ github.event_name }}
        run: |
          SHOULD_DEPLOY=false
          if [ "release" = "$EVENT_NAME"]; then
            SHOULD_DEPLOY=true
          fi

          echo "::set-output name=value::$SHOULD_DEPLOY"

      - name: Output should deploy
        run: echo ${{ steps.should-deploy.outputs.value }}

  create-image:
    needs: setup
    name: Create image
    runs-on: ubuntu-latest
    outputs:
      image-id: ${{ steps.image.outputs.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8

      - name: Download dependencies
        uses: php-actions/composer@v6
        with:
          args: --ignore-platform-reqs --quiet
          working_dir: app

      - name: Install packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer

      - name: Verify packer installation
        run: |
          packer --version
          if [ $? -ne 0 ]; then exit 1; fi; exit 0;

      - name: Verify image configuration
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          SNAPSHOT_NAME: ${{ needs.setup.outputs.snapshot-name }}
        run: |
          export echo $(cat build.env | tr '\n' ' ')
          packer validate image.pkr.hcl

      - name: Create image and snapshot
        id: image
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          SNAPSHOT_NAME: ${{ needs.setup.outputs.snapshot-name }}
        run: |
          export echo $(cat build.env | tr '\n' ' ')
          packer build image.pkr.hcl | tee packer.log
          ID=$(cat packer.log | tail -1 | grep -P -o 'ID: \d+' | tr -d 'ID: ')

          echo "::set-output name=id::$ID"

      - name: Verify snapshot exists
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          ID: ${{ steps.image.outputs.id }}
        run: |
          cd app
          WORKER_MANAGER_IMAGE=$ID php bin/console app:snapshot:exists --expect-exists 1

  update-stored-snapshot-id:
    needs: [setup, create-image]
    name: Update stored snapshot ID
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.should-deploy == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Trigger update worker manager image workflow if a release
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Update worker manager image
          token: ${{ secrets.PAT_TOKEN_SELF }}
          inputs: |
            {
              "image": "${{ needs.create-image.outputs.image-id }}",
              "commit_message": "Automatic worker-manager-image.env for release ${{ needs.setup.outputs.version }} ${{ needs.create-image.outputs.image-id }}"
            }

  remove-snapshot:
    needs: create-image
    name: Remove snapshot if not deploying
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.should-deploy == 'false' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8

      - name: Download dependencies
        uses: php-actions/composer@v6
        with:
          args: --ignore-platform-reqs --quiet
          working_dir: app

      - name: Remove snapshot
        if: ${{ github.event_name != 'release' }}
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          ID: ${{ needs.create-image.outputs.image-id }}
        run: |
          cd app
          php bin/console app:snapshot:delete --id $ID
          WORKER_MANAGER_IMAGE=$ID php bin/console app:snapshot:exists --expect-exists 0
