name: service.configure

on:
  repository_dispatch:
    types: [service-configure]
  workflow_dispatch:
    inputs:
      service_id:
        description: The service for which the configuration is being stored
        required: true
      version:
        description: The service version
        required: true

jobs:
  configure_service:
    name: Configure ${{ github.event.inputs.service_id }}
    runs-on: ubuntu-latest

    steps:
      - name: Output repository_dispatch inputs
        if: ${{ github.event_name == 'repository_dispatch' }}
        env:
          INPUTS: ${{ toJson(github.event.client_payload) }}
        run: echo "$INPUTS"

      - name: Output workflow_dispatch inputs
        env:
          INPUTS: ${{ toJson(github.event.inputs) }}
        run: echo "$INPUTS"

      - name: Set service_id
        id: service_id
        env:
          REPOSITORY_DISPATCH_VALUE: ${{ github.event.client_payload.service_id }}
          WORKFLOW_DISPATCH_VALUE: ${{ github.event.inputs.service_id }}
        run: echo "::set-output name=value::${REPOSITORY_DISPATCH_VALUE:-$WORKFLOW_DISPATCH_VALUE}"

      - name: Set version
        id: version
        env:
          REPOSITORY_DISPATCH_VALUE: ${{ github.event.client_payload.version }}
          WORKFLOW_DISPATCH_VALUE: ${{ github.event.inputs.version }}
        run: echo "::set-output name=value::${REPOSITORY_DISPATCH_VALUE:-$WORKFLOW_DISPATCH_VALUE}"

      - name: Verify setup
        env:
          SERVICE_ID: ${{ steps.service_id.outputs.value }}
          VERSION: ${{ steps.version.outputs.value }}
        run: |
          if [ "" = "$SERVICE_ID" ]; then
            echo "service_id not set"
            exit 1
          fi

          if [ "" = "$VERSION" ]; then
            echo "version not set"
            exit 1
          fi

          echo "service_id: $SERVICE_ID"
          echo "version: $VERSION"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Store service version
        env:
          CONFIGURATION_PATH: ./services/${{ steps.service_id.outputs.value }}/version
          VERSION: ${{ steps.version.outputs.value }}
        run: |
          mkdir -p "$(dirname "$CONFIGURATION_PATH")"
          echo "version=$VERSION" > "$CONFIGURATION_PATH"

      - name: Commit
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Automatic version update for ${{ steps.service_id.outputs.value }} ${{ steps.version.outputs.value }}"
