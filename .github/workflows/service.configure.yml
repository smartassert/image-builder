name: service.configure

on:
  repository_dispatch:
    types: [service-configure]
  workflow_dispatch:
    inputs:
      service_id:
        description: The service for which the configuration is being stored
        required: true
      version:
        description: The service version
        required: true

jobs:
  setup:
    name: Setup ${{ github.event.inputs.service_id }}
    runs-on: ubuntu-latest
    outputs:
      service_id: ${{ steps.service_id.outputs.value }}
      version: ${{ steps.version.outputs.value }}

    steps:
      - name: Output repository_dispatch inputs
        if: ${{ github.event_name == 'repository_dispatch' }}
        env:
          INPUTS: ${{ toJson(github.event.client_payload) }}
        run: echo "$INPUTS"

      - name: Output workflow_dispatch inputs
        env:
          INPUTS: ${{ toJson(github.event.inputs) }}
        run: echo "$INPUTS"

      - name: Checkout bash-ga-ci-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-ci-tools
          path: ./vendor/smartassert/bash-ga-ci-tools
          ref: main

      - name: Set service_id
        id: service_id
        env:
          VALUE1: ${{ github.event.client_payload.service_id }}
          VALUE2: ${{ github.event.inputs.service_id }}
        run: echo "::set-output name=value::$(./vendor/smartassert/bash-ga-ci-tools/src/select-exclusive-value-from-two-values.sh)"

      - name: Set version
        id: version
        env:
          VALUE1: ${{ github.event.client_payload.version }}
          VALUE2: ${{ github.event.inputs.version }}
        run: echo "::set-output name=value::$(./vendor/smartassert/bash-ga-ci-tools/src/select-exclusive-value-from-two-values.sh)"

  verify-setup:
    name: Verify setup ${{ needs.setup.outputs.service_id }}
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Output
        env:
          OUTPUTS: ${{ toJson(needs.setup.outputs) }}
        run: echo "$OUTPUTS"

      - name: Verify service_id and version are set
        env:
          SERVICE_ID: ${{ needs.setup.outputs.service_id }}
          VERSION: ${{ needs.setup.outputs.version }}
        run: |
          [[ -n "$SERVICE_ID" ]] || (echo "service_id not set" && exit 1)
          [[ -n "$VERSION" ]] || (echo "version not set" && exit 1)

  store:
    name: Store ${{ needs.setup.outputs.service_id }}
    runs-on: ubuntu-latest
    needs: [setup, verify-setup]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Store service configuration
        env:
          CONFIGURATION_PATH: ./services/${{ needs.setup.outputs.service_id }}/configuration.env
          VERSION: ${{ needs.setup.outputs.version }}
        run: |
          mkdir -p "$(dirname "$CONFIGURATION_PATH")"
          echo "version=$VERSION" > "$CONFIGURATION_PATH"

      - name: Commit
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Automatic configuration update for ${{ needs.setup.outputs.service_id }} ${{ needs.setup.outputs.version }}"
