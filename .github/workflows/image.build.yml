name: image.build

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      service_id:
        description: The service for which the configuration is being stored
        required: true
      should_deploy:
        description: Deploy image after building?
        required: true
        default: "false"
      dry_run:
        description: Run workflow without building anything
        required: true
        default: "false"

jobs:
  setup:
    if: ${{ (github.event_name == 'workflow_dispatch') || (github.event_name == 'pull_request' && github.event.pull_request.draft == false) }}
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      service_ids: ${{ env.service_ids }}
      should_deploy: ${{ env.should_deploy }}
      dry_run: ${{ env.dry_run }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set service ids
        run: |
          if [ "pull_request" = "${{ github.event_name }}" ]; then
            SERVICE_IDS=$(ls services)
            [[ -z "$SERVICE_IDS" ]] && echo "No services discovered at /services" && exit 1
          fi

          if [ "workflow_dispatch" = "${{ github.event_name }}" ]; then
            SERVICE_IDS="${{ github.event.inputs.service_id }}"
            [[ -z "$SERVICE_IDS" ]] && echo "Event service_id empty" && exit 1
          fi

          SERVICE_IDS_AS_JSON_ARRAY=$(jq -ncR '[inputs]' <<< "$SERVICE_IDS")

          echo "service_ids=$SERVICE_IDS_AS_JSON_ARRAY" >> "$GITHUB_ENV"

      - name: Set 'should_deploy'
        run: |
          SHOULD_DEPLOY="false"
          if [ "workflow_dispatch" = "${{ github.event_name }}" ]; then
            SHOULD_DEPLOY="${{ github.event.inputs.should_deploy }}"
          fi

          if [ "$SHOULD_DEPLOY" != "true" ]; then
            SHOULD_DEPLOY="false"
          fi

          echo "should_deploy=$SHOULD_DEPLOY" >> "$GITHUB_ENV"

      - name: Set 'dry_run'
        run: |
          DRY_RUN="false"
          if [ "workflow_dispatch" = "${{ github.event_name }}" ]; then
            DRY_RUN="${{ github.event.inputs.dry_run }}"
          fi

          if [ "$DRY_RUN" != "true" ]; then
            DRY_RUN="false"
          fi

          echo "dry_run=$DRY_RUN" >> "$GITHUB_ENV"

  build:
    needs: setup
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service_id: ${{ fromJson(needs.setup.outputs.service_ids) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout bash-ga-deploy-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-deploy-tools
          path: ./vendor/smartassert/bash-ga-deploy-tools
          ref: main

      - name: Checkout bash-ga-ci-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-ci-tools
          path: ./vendor/smartassert/bash-ga-ci-tools
          ref: main

      - name: Set service configuration directory
        run: echo "configuration_directory=./services/${{ matrix.service_id }}" >> "$GITHUB_ENV"

      - name: Read build configuration into packer -var arguments
        run: |
          FILE_PATH="${{ env.configuration_directory }}/build_configuration.json"
          if [ ! -f "$FILE_PATH" ]; then
            echo "Build configuration for service ${{ matrix.service_id }} not found: $FILE_PATH"
            exit 1
          fi

          OUTPUT=$(./vendor/smartassert/bash-ga-ci-tools/src/output-json-scalar-object.sh "-var {{ key }}={{ value }}" < "$FILE_PATH")
          echo "build_configuration=$OUTPUT" >> "$GITHUB_ENV"

      - name: Examine build configuration
        run: echo "${{ env.build_configuration }}"

      - name: Set path to image definition
        run: |
          FILE_PATH="${{ env.configuration_directory }}/image.pkr.hcl"
          if [ ! -f "$FILE_PATH" ]; then
            echo "Image definition for service ${{ matrix.service_id }} not found: $FILE_PATH"
            exit 1
          fi

          echo "image_definition_path=$FILE_PATH" >> "$GITHUB_ENV"

      - name: Validate image configuration
        uses: hashicorp/packer-github-actions@master
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
        with:
          command: validate
          arguments: ${{ env.build_configuration }}
          target: ${{ env.image_definition_path }}

      - name: Set snapshot name
        run: echo "snapshot_name=${{ matrix.service_id }}-$(date '+%Y%m%dT%H%M%S')" >> "$GITHUB_ENV"

      - name: Set packer log path
        run: echo "packer_log_path=./packer.log" >> "$GITHUB_ENV"

      - name: Create image
        if: ${{ needs.setup.outputs.dry_run == 'false' }}
        uses: hashicorp/packer-github-actions@master
        env:
          PACKER_LOG_PATH: ${{ env.packer_log_path }}
          PACKER_LOG: 1
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          SNAPSHOT_NAME: ${{ env.snapshot_name }}
        with:
          command: build
          arguments: "-machine-readable ${{ env.build_configuration }}"
          target: ${{ env.image_definition_path }}

      - name: Extract image ID from packer log
        if: ${{ needs.setup.outputs.dry_run == 'false' }}
        env:
          PACKER_LOG_PATH: ${{ env.packer_log_path }}
        run: echo "image_id=$(./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/extract-id-from-packer-log.sh)" >> "$GITHUB_ENV"

      - name: Verify image exists
        if: ${{ needs.setup.outputs.dry_run == 'false' }}
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          IMAGE_ID: ${{ env.image_id }}
          EXPECTED_EXISTS: "true"
        run: ./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/verify-existence.sh

      - name: Trigger dispatch of service-configure event to smartassert/instance-manager
        if: ${{ needs.setup.outputs.dry_run == 'false' && needs.setup.outputs.should_deploy == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN_SELF }}
          SERVICE_ID: ${{ matrix.service_id }}
          IMAGE_ID: ${{ env.image_id }}
        run: |
          gh workflow run instance-manager.service-set-image.yml -f service_id="$SERVICE_ID" -f image_id="$IMAGE_ID"

      - name: Remove snapshot
        if: ${{ needs.setup.outputs.dry_run == 'false' && needs.setup.outputs.should_deploy == 'false' }}
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          IMAGE_ID: ${{ env.image_id }}
          EXPECTED_EXISTS: "false"
        run: |
          ./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/delete.sh
          ./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/verify-existence.sh
