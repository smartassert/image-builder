name: image.build

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: Unique identifier for a run on this workflow
        required: false
      service_id:
        description: The service for which the configuration is being stored
        required: true
      should_deploy:
        description: Deploy image after building?
        required: true
        default: "false"

jobs:
  identify:
    name: run-${{ github.event.intputs.run_id }}

  setup:
    name: Setup ${{ github.event.inputs.service_id }}
    runs-on: ubuntu-latest
    outputs:
      configuration_directory: ${{ steps.configuration_directory.outputs.value }}
      snapshot_name: ${{ steps.snapshot_name.outputs.value }}
      version: ${{ steps.service_configuration.outputs.version }}
      should_deploy: ${{ steps.should_deploy.outputs.value }}
      image_definition_path: ${{ steps.image_definition_path.outputs.value }}

    steps:
      - name: Output workflow_dispatch inputs
        env:
          INPUTS: ${{ toJson(github.event.inputs) }}
        run: echo "$INPUTS"

      - name: Verify service_id is set
        env:
          SERVICE_ID: ${{ github.event.inputs.service_id }}
        run: |
          [[ -n "$SERVICE_ID" ]] || (echo "service_id not set" && exit 1)

      - name: Set should_deploy
        id: should_deploy
        env:
          INPUT_SHOULD_DEPLOY: ${{ github.event.inputs.should_deploy }}
        run: |
          SHOULD_DEPLOY="false"
          if [ "true" == $"INPUT_SHOULD_DEPLOY" ]; then
            SHOULD_DEPLOY="true"
          fi

          echo "::set-output name=value::$SHOULD_DEPLOY"

      - name: Set service configuration directory
        id: configuration_directory
        run: echo "::set-output name=value::./services/${{ github.event.inputs.service_id  }}"

      - name: Set service configuration path
        id: configuration_path
        run: echo "::set-output name=value::${{ steps.configuration_directory.outputs.value }}/configuration.env"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Verify service configuration exists
        run: |
          ./ci/scripts/check-service-configuration-exists.sh \
          "${{ github.event.inputs.service_id }}" \
          "${{ steps.configuration_path.outputs.value }}"

      - name: Set path to image definition
        id: image_definition_path
        run: echo "::set-output name=value::${{ steps.configuration_directory.outputs.value }}/image.pkr.hcl"

      - name: Verify image definition exists
        env:
          IMAGE_DEFINITION_PATH: ${{ steps.image_definition_path.outputs.value }}
        run: |
          if [ ! -f "$IMAGE_DEFINITION_PATH" ]; then
            echo "Image definition for service ${{ github.event.inputs.service_id }} not found: $IMAGE_DEFINITION_PATH"
            exit 1
          fi

      - name: Checkout bash-read-env-file
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-read-env-file
          path: ./vendor/smartassert/bash-read-env-file
          ref: main

      - name: Read service configuration
        id: service_configuration
        env:
          ENV_FILE_PATH: ${{ steps.configuration_path.outputs.value }}
        run: ./vendor/smartassert/bash-read-env-file/src/read-env-file-ga.sh

      - name: Set snapshot name
        id: snapshot_name
        run: echo "::set-output name=value::${{ github.event.inputs.service_id }}-${{ steps.service_configuration.outputs.version }}"

  create-image:
    needs: [setup]
    name: Create image
    runs-on: ubuntu-latest
    outputs:
      image-id: ${{ steps.image.outputs.id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout bash-ga-deploy-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-deploy-tools
          path: ./vendor/smartassert/bash-ga-deploy-tools
          ref: main

      - name: Validate image configuration
        uses: hashicorp/packer-github-actions@master
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
        with:
          command: validate
          target: ${{ needs.setup.outputs.image_definition_path }}

      - name: Set packer log path
        id: packer-log-path
        run: echo "::set-output name=value::./packer.log"

      - name: Create image
        uses: hashicorp/packer-github-actions@master
        env:
          PACKER_LOG_PATH: ${{ steps.packer-log-path.outputs.value }}
          PACKER_LOG: 1
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          SNAPSHOT_NAME: ${{ needs.setup.outputs.snapshot_name }}
          VERSION: ${{ needs.setup.outputs.version }}
        with:
          command: build
          arguments: "-machine-readable"
          target: ${{ needs.setup.outputs.image_definition_path }}

      - name: Extract image ID from packer log
        id: image
        env:
          PACKER_LOG_PATH: ${{ steps.packer-log-path.outputs.value }}
        run: echo "::set-output name=id::$(./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/extract-id-from-packer-log.sh)"

      - name: Verify image exists
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          IMAGE_ID: ${{ steps.image.outputs.id }}
          EXPECTED_EXISTS: "true"
        run: ./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/verify-existence.sh

  configure-instance-manager:
    needs: [setup, create-image]
    name: Update stored snapshot ID
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.should_deploy == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Dispatch service-configure event to smartassert/instance-manager
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.INSTANCE_MANAGER_TOKEN }}
          repository: smartassert/instance-manager
          event-type: service-configure
          client-payload: |
            {
              "service_id": "${{ github.event.inputs.service_id }}",
              "image_id": "${{ needs.create-image.outputs.image-id }}",
              "state_url": "/",
              "health_check_url": "/health-check",
              "destroy_include_filter": "[{\"message-queue-size\":0}]"
            }

  remove-snapshot:
    needs: create-image
    name: Remove snapshot if not deploying
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.should_deploy == 'false' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout bash-ga-deploy-tools
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-ga-deploy-tools
          path: ./vendor/smartassert/bash-ga-deploy-tools
          ref: main

      - name: Remove snapshot
        env:
          DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}
          IMAGE_ID: ${{ needs.create-image.outputs.image-id }}
          EXPECTED_EXISTS: "false"
        run: |
          ./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/delete.sh
          ./vendor/smartassert/bash-ga-deploy-tools/src/digitalocean-snapshot/verify-existence.sh
