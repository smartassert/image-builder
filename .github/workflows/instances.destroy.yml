name: Destroy Inactive Instances

on:
  workflow_dispatch:
    inputs:
      service_id:
        description: Service for which to create an instance
        required: true

jobs:
  assign:
    name: Destroy instances
    runs-on: ubuntu-latest
    env:
      DIGITALOCEAN_API_TOKEN: ${{ secrets.DIGITALOCEAN_API_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout bash-read-env-file
        uses: actions/checkout@v2
        with:
          repository: smartassert/bash-read-env-file
          path: ./vendor/smartassert/bash-read-env-file
          ref: main

      - name: Read service configuration
        id: build-config
        env:
          ENV_FILE_PATH: ./services/${{ github.event.inputs.service_id }}/configuration.env
          SERVICE_ID: ${{ github.event.inputs.service_id }}
        run: |
          ./ci/scripts/check-service-configuration-exists.sh
          ./vendor/smartassert/bash-read-env-file/src/read-env-file-ga.sh

      - name: Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8

      - name: Download dependencies
        uses: php-actions/composer@v6
        with:
          args: --ignore-platform-reqs --quiet
          working_dir: app

      - name: Get floating IP
        id: ip
        env:
          INSTANCE_COLLECTION_TAG: ${{ github.event.inputs.service_id }}
        run: echo "::set-output name=value::$(php app/bin/console app:ip:get)"

      - name: Get list of instances to destroy
        id: instances
        if: ${{ steps.ip.outputs.value != '' }}
        env:
          INSTANCE_COLLECTION_TAG: ${{ github.event.inputs.service_id }}
          IP: ${{ steps.ip.outputs.value }}
        run: |
          INSTANCES=$(php app/bin/console app:instance:list --include='[{"message-queue-size":0}]' --exclude='[{"ips":"127.0.0.1"}]')

          echo "::set-output name=value::$INSTANCES"

      - name: Destroy matching instances
        if: ${{ steps.instances.outputs.value != '' }}
        env:
          INSTANCE_COLLECTION_TAG: ${{ github.event.inputs.service_id }}
          INSTANCES: ${{ steps.instances.outputs.value }}
        run: |
          INSTANCE_IDS=$(echo "$INSTANCES" | jq '.instances[] | .id' | sed ':a;N;$!ba;s/\n/ /g')

          echo "$INSTANCES" | jq "."
          echo "IDs: $INSTANCE_IDS"

          for ID in $INSTANCE_IDS; do
            echo "Destroying $ID ... "
            php app/bin/console app:instance:destroy --id="$ID"
          done
